name: Continuous Integration Workflow

on:
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/arm-build-tools
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build check
        run: cmake --build --preset CAVeBoard_Release -j$(nproc)
      - name: Upload builds
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: caveboard-build
          path: build/CAVeBoard_Release/CAVeware.*
  cppcheck:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/arm-build-tools
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Setup
        uses: ./.github/actions/setup
      - name: Cppcheck
        run: cmake --build --preset CAVeBoard_Release -j$(nproc) --target cppcheck
      - name: Generate HTML Report
        run: cmake --build --preset CAVeBoard_Release -j$(nproc) --target cppcheck-htmlreport
      - name: Upload Cppcheck Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: cppcheck-report
          path: |
            build/CAVeBoard_Release/cppcheck_report.xml
            build/CAVeBoard_Release/cppcheck_htmlreport/
  uncrustify:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/arm-build-tools
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Setup
        uses: ./.github/actions/setup
      - name: Crust check
        run: cmake --build --preset CAVeBoard_Release -j$(nproc) --target uncrustify-check
      - name: Upload Uncrustify Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: uncrustify-report
          path: build/CAVeBoard_Release/uncrustify_report.txt
  # unit-tests:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: d3lta12/arm-build-tools
  #   env:
  #     BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"
  #         fetch-depth: 0
  #     # TODO cache STM32CubeMX generated code, re-build cache on ioc changes
  #     - name: STM32CubeMX Generate Code
  #       uses: docker://d3lta12/stm32cubemx-stm32f4
  #       with:
  #         args: /opt/STM32CubeMX/jre/bin/java -jar /opt/STM32CubeMX/STM32CubeMX -q CAVeware_nucleo64.script
  #     - name: Install sonar-scanner and build-wrapper
  #       uses: sonarsource/sonarcloud-github-c-cpp@v3
  #     - name: Cache CMake files
  #       id: cache-cmake
  #       uses: actions/cache@v4
  #       env:
  #         cache-name: cache-cmake
  #       with:
  #         path: ./build
  #         key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
  #     - name: Generate CMake cache
  #       if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
  #       run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
  #     - name: Run sonar-scanner
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.CAVEMAN_CONTROLLER_SONARCLOUD_TOKEN }}
  #       run: |
  #         sonar-scanner \
  #           -Dsonar.projectKey=delta-12_CAVeware \
  #           -Dsonar.organization=delta-12 \
  #           -Dsonar.sources=bsp,caveman_controller \
  #           --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" \